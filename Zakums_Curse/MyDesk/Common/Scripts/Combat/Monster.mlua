@Component
script Monster extends Component

	@Sync
	property number MaxHp = 100

	@Sync
	property number Hp = 0

	@Sync
	property boolean RespawnOn = false

	@Sync
	@HideFromInspector
	property boolean IsDead = false

	@Sync
	property number RespawnDelay = 5

	@Sync
	property number DestroyDelay = 0.6

	method void OnBeginPlay()
		self.Hp = self.MaxHp
	end

	@ExecSpace("ServerOnly")
	method void Dead()
		self.IsDead = true
		local stateComponent = self.Entity.StateComponent
		if stateComponent then
			stateComponent:ChangeState("DEAD")
			log("monster change state to DEAD")
		end
		
		local delayHide = function()
			self.Entity:SetVisible(false)
			self.Entity:SetEnable(false)
			
			if self.RespawnOn == false then
				self.Entity:Destroy()
			end
		end
		
		_TimerService:SetTimerOnce(delayHide, self.DestroyDelay)
	end

	@ExecSpace("ServerOnly")
	method void Respawn()
		log("Respawn")
		self.IsDead = false
		self.Entity:SetVisible(true)
		self.Entity:SetEnable(true)
		
		self.Hp = self.MaxHp
		local stateComponent = self.Entity.StateComponent
		if stateComponent then
			stateComponent:ChangeState("IDLE")
		end
	end

	@ExecSpace("ServerOnly")
	@EventSender("Self")
	handler HandleHitEvent(HitEvent event)
		-- Parameters
		-- local AttackCenter = event.AttackCenter
		-- local AttackerEntity = event.AttackerEntity
		-- local Damages = event.Damages
		-- local Extra = event.Extra
		-- local IsCritical = event.IsCritical
		local TotalDamage = event.TotalDamage
		--------------------------------------------------------
		
		local originalHp = self.Hp
		self.Hp = self.Hp - TotalDamage
		
		if self.Hp > 0 or originalHp <= 0 then
			return	
		end
		
		self:Dead()
		local timerFunc = function() self:Respawn() end
		
		if self.RespawnOn then
			_TimerService:SetTimerOnce(timerFunc, self.RespawnDelay)
		end
	end

end